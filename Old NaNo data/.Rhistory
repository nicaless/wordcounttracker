"usa-washington-seattle",
"usa-louisiana-new-orleans",
"usa-florida-miami",
"usa-michigan-ann-arbor",
"usa-georgia-savannah",
"usa-pennsylvania-pittsburgh",
"usa-oregon-portland",
"usa-iowa-iowa-city",
#"usa-massachusetts-cambridge",
"usa-massachusetts-elsewhere",
"europe-scotland-edinburgh",
"europe-ireland-dublin",
"europe-england-london",
"europe-france-paris",
"australia-melbourne",
"central-south-america-chile",
"usa-missouri-st-louis",
"africa-egypt",
"asia-china",
"asia-japan",
"asia-india",
"russia-moscow",
"asia-philippines",
"asia-south-korea-seoul",
"canada-ontario-ottawa",
"canada-quebec-montreal",
"canada-ontario-toronto",
"central-south-america-brazil",
"usa-utah-salt-lake-county",
"usa-california-elsewhere",
"usa-california-lompoc",
"europe-france-elsewhere",
"europe-switzerland",
"usa-virginia-northern",
"usa-new-york-plattsburgh",
"usa-florida-jacksonville",
"usa-louisiana-elsewhere",
"usa-illinois-naperville",
"australia-sydney",
"usa-texas-amarillo")
regionsummary = getRegionSummary(my_regions)
regionhistories = getRegionHistory(my_regions)
write.csv(regionsummary, file = "NaNoRegionSummary_11_30_1_2015")
write.csv(regionhistories, file = "NaNoRegionHistories_11_30_1_2015")
source("nanowrimo.R")
library(XML)
library(xts)
library(forecast)
# cities chosen by http://flavorwire.com/416836/20-great-american-cities-for-writers-that-arent-new-york/
# exceptions: Saint Paul, MN incorporated in Twin Cities
# excluded great barrington, MA
# excluded Portland, ME
# excluded Jersey City, NJ
# excluded Portsmouth, NH
# excluded Cambridge, MA, i'm not sure why
# also chosen by http://travel.nationalgeographic.com/travel/top-10/literary-cities/
#http://jameystegmaier.com/2009/04/the-five-best-cities-in-the-world-for-writers/
# 38 delibrately chosen, 12 selected randomly
my_regions = c("usa-california-san-francisco",
"usa-california-los-angeles",
"usa-massachusetts-boston",
"usa-new-york-new-york-city",
"usa-illinois-chicago",
"usa-texas-austin",
"usa-south-carolina-charleston",
"usa-washington-bellingham",
"usa-north-carolina-asheville",
"usa-district-of-columbia",
"usa-minnesota-twin-cities",
"usa-washington-seattle",
"usa-louisiana-new-orleans",
"usa-florida-miami",
"usa-michigan-ann-arbor",
"usa-georgia-savannah",
"usa-pennsylvania-pittsburgh",
"usa-oregon-portland",
"usa-iowa-iowa-city",
#"usa-massachusetts-cambridge",
"usa-massachusetts-elsewhere",
"europe-scotland-edinburgh",
"europe-ireland-dublin",
"europe-england-london",
"europe-france-paris",
"australia-melbourne",
"central-south-america-chile",
"usa-missouri-st-louis",
"africa-egypt",
"asia-china",
"asia-japan",
"asia-india",
"russia-moscow",
"asia-philippines",
"asia-south-korea-seoul",
"canada-ontario-ottawa",
"canada-quebec-montreal",
"canada-ontario-toronto",
"central-south-america-brazil",
"usa-utah-salt-lake-county",
"usa-california-elsewhere",
"usa-california-lompoc",
"europe-france-elsewhere",
"europe-switzerland",
"usa-virginia-northern",
"usa-new-york-plattsburgh",
"usa-florida-jacksonville",
"usa-louisiana-elsewhere",
"usa-illinois-naperville",
"australia-sydney",
"usa-texas-amarillo")
regionsummary = getRegionSummary(my_regions)
regionhistories = getRegionHistory(my_regions)
write.csv(regionsummary, file = "NaNoRegionSummary_11_30_2_2015")
write.csv(regionhistories, file = "NaNoRegionHistories_11_30_2_2015")
setwd("~/Dropbox/GitHub/wordcounttracker/wordcounttracker")
source("nanowrimo.R")
library(XML)
library(xts)
library(forecast)
# cities chosen by http://flavorwire.com/416836/20-great-american-cities-for-writers-that-arent-new-york/
# exceptions: Saint Paul, MN incorporated in Twin Cities
# excluded great barrington, MA
# excluded Portland, ME
# excluded Jersey City, NJ
# excluded Portsmouth, NH
# excluded Cambridge, MA, i'm not sure why
# also chosen by http://travel.nationalgeographic.com/travel/top-10/literary-cities/
#http://jameystegmaier.com/2009/04/the-five-best-cities-in-the-world-for-writers/
# 38 delibrately chosen, 12 selected randomly
my_regions = c("usa-california-san-francisco",
"usa-california-los-angeles",
"usa-massachusetts-boston",
"usa-new-york-new-york-city",
"usa-illinois-chicago",
"usa-texas-austin",
"usa-south-carolina-charleston",
"usa-washington-bellingham",
"usa-north-carolina-asheville",
"usa-district-of-columbia",
"usa-minnesota-twin-cities",
"usa-washington-seattle",
"usa-louisiana-new-orleans",
"usa-florida-miami",
"usa-michigan-ann-arbor",
"usa-georgia-savannah",
"usa-pennsylvania-pittsburgh",
"usa-oregon-portland",
"usa-iowa-iowa-city",
#"usa-massachusetts-cambridge",
"usa-massachusetts-elsewhere",
"europe-scotland-edinburgh",
"europe-ireland-dublin",
"europe-england-london",
"europe-france-paris",
"australia-melbourne",
"central-south-america-chile",
"usa-missouri-st-louis",
"africa-egypt",
"asia-china",
"asia-japan",
"asia-india",
"russia-moscow",
"asia-philippines",
"asia-south-korea-seoul",
"canada-ontario-ottawa",
"canada-quebec-montreal",
"canada-ontario-toronto",
"central-south-america-brazil",
"usa-utah-salt-lake-county",
"usa-california-elsewhere",
"usa-california-lompoc",
"europe-france-elsewhere",
"europe-switzerland",
"usa-virginia-northern",
"usa-new-york-plattsburgh",
"usa-florida-jacksonville",
"usa-louisiana-elsewhere",
"usa-illinois-naperville",
"australia-sydney",
"usa-texas-amarillo")
regionsummary = getRegionSummary(my_regions)
regionhistories = getRegionHistory(my_regions)
write.csv(regionsummary, file = "NaNoRegionSummary_12_1_2015")
write.csv(regionhistories, file = "NaNoRegionHistories_12_1_2015")
summary15 = read.csv("NaNoRegionSummary_11_15_2015")
summary15 = read.csv("NaNoRegionSummary_11_15_2015", stringsAsFactors = False)
summary15 = read.csv("NaNoRegionSummary_11_15_2015", stringsAsFactors = F)
View(summary15)
summary15 = read.csv("NaNoRegionSummary_11_15_2015", stringsAsFactors = F)
names(summary15)[1] = "Date"
summar15[1] = as.Date("2015-11-15")
summary15[1] = as.Date("2015-11-15")
summary25 = read.csv("NaNoRegionSummary_11_25_2015", stringsAsFactors = F)
names(summary25)[1] = "Date"
summary25[1] = as.Date("2015-11-25")
summary30 = read.csv("NaNoRegionSummary_12_1_2015", stringsAsFactors = F)
names(summary30)[1] = "Date"
summary30[1] = as.Date("2015-11-30")
View(summary25)
summary = cbind(summary15, summary20, summary25, summary30)
summary20 = read.csv("NaNoRegionSummary_11_20_2015", stringsAsFactors = F)
names(summary20)[1] = "Date"
summary20[1] = as.Date("2015-11-20")
summary = cbind(summary15, summary20, summary25, summary30)
summary = rbind(summary15, summary20, summary25, summary30)
View(summary)
source("nanowrimo.R")
library(XML)
library(xts)
library(forecast)
#bars percentage of total top 5 wc,donations,wcavg etc. over time
# more interesting scatters????
#final top 10 tables
# fixing tracker app to use static data
# Read in Data
# Region Summaries
summary15 = read.csv("NaNoRegionSummary_11_15_2015", stringsAsFactors = F)
names(summary15)[1] = "Date"
summary15[1] = as.Date("2015-11-15")
summary20 = read.csv("NaNoRegionSummary_11_20_2015", stringsAsFactors = F)
names(summary20)[1] = "Date"
summary20[1] = as.Date("2015-11-20")
summary25 = read.csv("NaNoRegionSummary_11_25_2015", stringsAsFactors = F)
names(summary25)[1] = "Date"
summary25[1] = as.Date("2015-11-25")
summary30 = read.csv("NaNoRegionSummary_12_1_2015", stringsAsFactors = F)
names(summary30)[1] = "Date"
summary30[1] = as.Date("2015-11-30")
summary = rbind(summary15, summary20, summary25, summary30)
#Site Summary
sitesummary = getSiteSummary()
sitehistory = getSiteHistory()
regionhistory = read.csv("NaNoRegionHistories_12_1_2015", stringsAsFactors = F)
View(regionhistory)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary$WordCountAverage = summary$WordCount/summary$Participants
summary$DonationAverage = summary$Donations/summary$Participants
summary$DonorParticipantRatio = summary$Donors/summary$Participants
summary$DonationWordCountRatio = summary$Donors/summary$WordCount
summary = data.frame(WriMo = "November 2015", summary)
View(summary)
View(regionhistory)
2148 * 1091
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
3394524672 / 180952
?write.csv
xmltop.site <<- getXML("http://nanowrimo.org/wordcount_api/wcstats")
as.numeric(xmlValue(xmltop.site[[1]]))
as.numeric(xmlValue(xmltop.site[[2]]))
as.numeric(xmlValue(xmltop.site[[3]]))
xmlValue(xmltop.site)
xmltop.site <<- getXML("http://nanowrimo.org/wordcount_api/wcstatssummary")
xmltop.site
source("nanowrimo.R")
library(XML)
library(xts)
library(forecast)
#bars percentage of total top 5 wc,donations,wcavg etc. over time
# more interesting scatters????
#final top 10 tables
# fixing tracker app to use static data
# Read in Data
# Region Summaries
summary15 = read.csv("NaNoRegionSummary_11_15_2015", stringsAsFactors = F)
names(summary15)[1] = "Date"
summary15[1] = as.Date("2015-11-15")
summary20 = read.csv("NaNoRegionSummary_11_20_2015", stringsAsFactors = F)
names(summary20)[1] = "Date"
summary20[1] = as.Date("2015-11-20")
summary25 = read.csv("NaNoRegionSummary_11_25_2015", stringsAsFactors = F)
names(summary25)[1] = "Date"
summary25[1] = as.Date("2015-11-25")
summary30 = read.csv("NaNoRegionSummary_12_1_2015", stringsAsFactors = F)
names(summary30)[1] = "Date"
summary30[1] = as.Date("2015-11-30")
summary = rbind(summary15, summary20, summary25, summary30)
summary$WordCountAverage = summary$WordCount/summary$Participants
summary$DonationParticipantRatio = summary$Donations/summary$Participants
summary$DonorParticipantRatio = summary$Donors/summary$Participants
summary$DonationWordCountRatio = summary$Donors/summary$WordCount
summary = data.frame(WriMo = "November 2015", summary)
#Site Summary
sitesummary = getSiteSummary()
sitehistory = getSiteHistory()
# Region History
regionhistory = read.csv("NaNoRegionHistories_12_1_2015", stringsAsFactors = F)
names(regionhistory)[1] = "WriMo"
regionhistory[1] = "November 2015"
regionhistory$DonationParticipantRatio = regionhistory$Donations/regionhistory$Participants
regionhistory$DonorParticipantRatio = regionhistory$Donors/regionhistory$Participants
regionhistory$DonationWordCountRatio = regionhistory$Donors/regionhistory$WordCount
#Write data
write.csv(summary, file = "regionsummary_11_2015.csv")
write.csv(sitesummary, file = "sitesummary_11_2015.csv")
write.csv(sitehistory, file = "sitehistory_11_2015.csv")
write.csv(regionhistory, file = "regionhistory_11_2015.csv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/Dropbox/GitHub/wordcounttracker/wordcounttracker/nanowrimo.R')
past_region_history_data <<- read.csv("data/regionhistory_11_2015.csv", stringsAsFactors = F)
past_region_history_data$Date = as.Date(past_region_history_data$Date)
past_region_history_data <<- read.csv("data/regionhistory_11_2015.csv", stringsAsFactors = F)
past_region_history_data$Date = as.Date(past_region_history_data$Date)
plotRegionHistoryCorr <- function(region_names, wrimo, x_val, y_val, type) {
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData = subset(rawData, Region %in% region_names, select = c(x_val, y_val, Region))
report = data.frame(X_Val = rawData[, x_val], Y_Val = rawData[, y_val], Region = rawData$Region)
if (type == "bar") {
print(ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar() + labs(x = x_val, y = y_val))
}
if (type == "line") {
print(ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, colour = Region)) + geom_line() + labs(x = x_val, y = y_val))
}
if (type == "scatter") {
print(ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, colour = Region)) + geom_point() + labs(x = x_val, y = y_val))
}
}
plotRegionHistoryCorr("usa-san-francisco-california", "November 2015", "Date", "WCAverage", "bar")
wrimo = "November 2015"
region_names = "usa-california-san-francisco"
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData = subset(rawData, Region %in% region_names, select = c(x_val, y_val, Region))
x_val = "Date"
y_val = "WCAverage"
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData = subset(rawData, Region %in% region_names, select = c(x_val, y_val, Region))
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData = subset(rawData, Region %in% region_names, select = c(x_val, y_val, "Region"))
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData = subset(rawData, Region %in% region_names, select = c(x_val, y_val, "Region"))
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData$Region[1] %in% region_names
rawData$Region[1]
unique(rawData$Region)
c(unique(rawData$Region))
shiny::runApp()
region_names = c("USA :: California :: San Francisco","Europe :: England :: London",
"Europe :: France:: Paris","USA :: New York :: New York City")
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData = subset(rawData, Region %in% region_names, select = c(x_val, y_val, "Region"))
report = data.frame(X_Val = rawData[, x_val], Y_Val = rawData[, y_val], Region = rawData$Region)
report = data.frame(X_Val = rawData[, x_val], Y_Val = rawData[, y_val], Region = rawData[, "Region"])
report = data.frame(X_Val = rawData[, x_val], Y_Val = rawData[, y_val], Region = as.character(rawData[, "Region"]))
shiny::runApp()
region_names
wrimo
x_val
y_val
type
type = "bar"
plotRegionHistoryCorr(region_names, wrimo, x_val, y_val, type)
plotRegionHistoryCorr(region_names, wrimo, x_val, y_val, type)
plotRegionHistoryCorr(region_names, wrimo, x_val, y_val, type)
plotRegionHistoryCorr <- function(region_names, wrimo, x_val, y_val, type) {
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData = subset(rawData, Region %in% region_names, select = c(x_val, y_val, "Region"))
report = data.frame(X_Val = rawData[, x_val], Y_Val = rawData[, y_val], Region = as.character(rawData[, "Region"]))
report$Region = as.character(report$Region)
if (type == "bar") {
print(ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val))
}
if (type == "line") {
print(ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, colour = Region)) + geom_line() + labs(x = x_val, y = y_val))
}
if (type == "scatter") {
print(ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, colour = Region)) + geom_point() + labs(x = x_val, y = y_val))
}
}
plotRegionHistoryCorr(region_names, wrimo, x_val, y_val, type)
unique(past_region_history_data$Region)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plotRegionHistoryCorr(region_names, wrimo, x_val, y_val, type)
shiny::runApp()
past_site_summary <<- read.csv("data/sitesummary_11_2015.csv", stringsAsFactors = F)
shiny::runApp()
?read.csv
shiny::runApp()
printSiteTable("November 2015")
ast_region_summary <<- read.csv("data/regionsummary_11_2015.csv", stringsAsFactors = F)
past_region_summary <<- read.csv("data/regionsummary_11_2015.csv", stringsAsFactors = F)
dcast(rawData, Regions ~., value.var = "WordCount", sum)[1,2]
dcast(past_region_summary, Regions ~., value.var = "WordCount", sum)[1,2]
dcast(past_region_summary, Region ~., value.var = "WordCount", sum)[1,2]
WordCount = dcast(rawData, Region ~., value.var = "WordCount", sum)[1,]
dcast(past_region_summary, Region ~., value.var = "WordCount", sum)[1,]
shiny::runApp()
shiny::runApp()
?order
?order
order(dcast(rawData, Region ~., value.var = "WordCount", sum), decreasing = F)[1,]
order(dcast(past_region_summary, Region ~., value.var = "WordCount", sum), decreasing = F)[1,]
order(dcast(past_region_summary, Region ~., value.var = "WordCount", sum), decreasing = F)
dcast(past_region_summary, Region ~., value.var = "WordCount", max)
?dcast
WordCount = dcast(past_region_summary, Region ~., value.var = "WordCount", sum)
WordCount = WordCount[order(WordCount$WordCount, decreasing = T), ][1, ]
WordCount = dcast(past_region_summary, Region ~., value.var = "WordCount", sum)
WordCount = WordCount[order(WordCount$WordCount, decreasing = T), ]
WordCount = dcast(past_region_summary, Region ~., value.var = "WordCount", sum)
WordCount = WordCount[order(WordCount[, 2], decreasing = T), ]
WordCount = dcast(past_region_summary, Region ~., value.var = "WordCount", sum)
WordCount = WordCount[order(WordCount[, 2], decreasing = T), ][1, ]
WordCount
shiny::runApp()
shiny::runApp()
past_region_history_data <<- read.csv("data/regionhistory_11_2015.csv", stringsAsFactors = F)
regions_list = unique(past_region_history_data$Region)
regions_list
pwd
setwd("~/Dropbox/GitHub/wordcounttracker/wordcounttracker/data")
write.csv(regions_list, file = "regionnames.csv")
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
WordCount = dcast(rawData, Region ~., value.var = "WordCount", sum)
WordCount = WordCount[order(WordCount[, 2], decreasing = T), ][1, ]
rawData
names(WordCount)
names(rawData)
rawData = past_region_summary
names(rawData)
str(rawData)
WordCount = dcast(rawData, Region ~., value.var = "WordCount", sum)
WordCount = WordCount[order(WordCount[, 2], decreasing = T), ][1, ]
WordCount
WordCount[1, ]
WordCount[1, 1]
Donations = dcast(rawData, Region ~., value.var = "Donations", sum)[1,]
Donations = Donations[order(Donations[, 2], decreasing = T), ][1, ]
Donations[1, 1]
Donations = dcast(rawData, Region ~., value.var = "Donations", sum)[1,]
Donations
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
sitehistory = getSiteHistory()
my_df = subset(sitehistory, select = c(Date, val))
val = "WordCount"
sitehistory = getSiteHistory()
my_df = subset(sitehistory, select = c(Date, val))
sitehistory = getSiteHistory()
my_df = subset(sitehistory, select = c("Date", val))
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
plotWC_Site(val = "WordCount")
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
names(past_site_history)
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
names(past_site_history)
names(past_region_history_data)
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData = subset(rawData, Region %in% region_names, select = c(x_val, y_val, "Region"))
report = data.frame(X_Val = rawData[, x_val], Y_Val = rawData[, y_val], Region = as.character(rawData[, "Region"]))
report$Region = as.character(report$Region)
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + theme(legend.position="bottom") + guides(col=guide_legend(ncol = 3))
region_names
region_names = c("USA :: California :: San Francisco", "Europe :: England :: London", "Europe :: France :: Paris", "USA :: New York :: New York City")
rawData = subset(past_region_history_data, WriMo == wrimo)
rawData = subset(rawData, Region %in% region_names, select = c(x_val, y_val, "Region"))
report = data.frame(X_Val = rawData[, x_val], Y_Val = rawData[, y_val], Region = as.character(rawData[, "Region"]))
report$Region = as.character(report$Region)
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + theme(legend.position="bottom") + guides(col=guide_legend(ncol = 3))
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + theme(legend.position="bottom") + guides(col=guide_legend(ncol = 3, byrow = T))
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + guides(col=guide_legend(ncol = 3, byrow = T))
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + guides(col=guide_legend(ncol = 3, byrow = T)) + theme(legend.position="bottom")
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + guides(col = guide_legend(ncol = 3, byrow = T)) + theme(legend.position="bottom")
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + guides(col = guide_legend(nrow = 3, byrow = T)) + theme(legend.position="bottom")
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + guides(col = guide_legend(ncol = 3)) + theme(legend.position="bottom")
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + guides(col = guide_legend(nrow = 3)) + theme(legend.position="bottom")
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + guides(col = guide_legend(nrow = 3, byrow = T)) + theme(legend.position="bottom")
ggplot(data = report, aes(x = X_Val, y = Y_Val, group = Region, fill = Region)) + geom_bar(stat = "identity") + labs(x = x_val, y = y_val) + guides(fill = guide_legend(nrow = 3, byrow = T)) + theme(legend.position="bottom")
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
shiny::runApp('~/Dropbox/GitHub/wordcounttracker/wordcounttracker')
